{"version":3,"sources":["SpotifyAPI.js","graphql/mutations.js","Auth.js","Header.js","DevPublisher.js","SpotifyWebPlayer.js","SpotifyContext.js","useSpotifyWebPlayer.js","SongPlayerWithControls.js","useSpotifyAPI.js","Track.js","TrackList.js","EQBars.js","graphql/queries.js","Listen.js","graphql/subscriptions.js","BroadcastPublisher.js","PowerHourControl.js","Broadcast.js","Channel.js","Home.js","App.js","serviceWorker.js","aws-exports.js","index.js","logo.png"],"names":["SpotifyAPI","accessToken","onUnauthorized","Error","this","maybeHandle401","bind","response","status","fetch","method","headers","Authorization","then","ok","json","console","error","data","device","id","uri","deviceID","query","body","JSON","stringify","uris","device_ids","play","createSongEvent","AuthContext","createContext","AuthRedirect","getAuthorizeURI","pathname","redirectURI","encodeURIComponent","process","currentPath","AuthProvider","children","useLocalStorage","authInfo","setAuthInfo","location","useLocation","history","useHistory","username","React","useEffect","hash","params","slice","split","map","param","forEach","tup","access_token","fetchUserInfo","user","spotifyIdentifier","display_name","push","decodeURIComponent","state","API","graphql","graphqlOperation","input","userID","catch","handleAuthRedirect","authContext","useMemo","logout","retryAuth","window","href","Provider","value","Header","useContext","authorizeURI","match","useRouteMatch","className","to","src","logo","alt","onClick","e","preventDefault","DevPublisher","hostUsername","timeoutID","setInterval","songEvent","timestamp","Math","floor","Date","now","position","spotifyURI","random","toString","mutations","log","clearInterval","SpotifyWebPlayer","player","spotifyAPI","getCurrentState","pause","ms","seek","nextTrack","callback","addListener","removeListener","transferPlayback","Promise","resolve","Spotify","Player","onSpotifyWebPlaybackSDKReady","sdkScript","document","createElement","appendChild","__accessToken","__onUnauthorized","EMglobalPlayerInstance","EMGlobalPlayerInstance","name","getOAuthToken","cb","volume","on","message","device_id","connect","success","inject","initializePlayer","track_window","current_track","type","SpotifyContext","SpotifyProvider","useState","webPlayer","setWebPlayer","setSpotifyAPI","api","createInstance","inst","spotifyContext","useSpotifyWebPlayer","SongPlayerWithControls","song","useSpotifyAPI","spotifyWebPlayer","devices","setDevices","activeDeviceID","setActiveDeviceID","activeDeviceIDRef","useRef","isReady","setIsReady","current","eardrumPlayer","getDeviceID","deviceList","find","d","fetchDevices","activeDevice","is_active","onChange","event","target","key","Track","track","albumImg","artistName","TrackList","songs","EQBars","songEventsByUserId","StartListening","isListening","ListenPlayer","isCurrentlyLive","isListeningUsername","setIsListeningUsername","noSleep","NoSleep","enable","disable","handleJoin","useCallback","Listen","devPublisherEnabled","search","includes","Connect","queries","sortDirection","limit","subscription","onSubscriptionMsg","prev","onCreateSongEvent","songEventsByUserID","items","unshift","length","pop","loading","isRecent","BroadcastPublisher","currentTrack","onSongEvent","handlePlayerStateChangedRef","currentTrackRef","newState","newTrack","getTrackFromState","trackData","trackID","durationMs","duration_ms","albumName","album","artists","images","url","publishSongEvent","changeListener","initFunc","fetchState","addStateChangeListener","fetchCurrentDeviceID","removeStateChangeListener","PowerHourControl","phEnabled","setPhEnabled","phCount","setPhCount","phCallbackRef","handleChange","enabled","htmlFor","checked","Broadcast","songHistory","setSongHistory","setCurrentTrack","handleSongEvent","h","concat","trackList","Channel","useParams","UserList","users","Home","onUserUpdate","listUsers","App","exact","path","Boolean","hostname","awsmobile","aws_project_region","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","Amplify","configure","awsconfig","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.daacac47.chunk.js","sourcesContent":["export default class SpotifyAPI {\r\n  constructor(accessToken, onUnauthorized) {\r\n    if (accessToken == null) {\r\n      throw new Error(\"Access token was null\");\r\n    }\r\n    this.accessToken = accessToken;\r\n    this.onUnauthorized = onUnauthorized ?? (() => {});\r\n    this.maybeHandle401 = this.maybeHandle401.bind(this);\r\n  }\r\n\r\n  maybeHandle401(response) {\r\n    if (response.status === 401) {\r\n      this.onUnauthorized();\r\n      throw new Error(\"Unauthorized: \", response);\r\n    }\r\n    return response;\r\n  }\r\n\r\n  fetchUserInfo() {\r\n    return fetch(\"https://api.spotify.com/v1/me\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.accessToken}`,\r\n      },\r\n    })\r\n      .then(this.maybeHandle401)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw response;\r\n        }\r\n        return response.json();\r\n      });\r\n  }\r\n\r\n  fetchCurrentDeviceID() {\r\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.accessToken}`,\r\n      },\r\n    })\r\n      .then(this.maybeHandle401)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          console.error(\"error fetching device id\");\r\n        }\r\n        if (response.status === 204) {\r\n          return null;\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data?.device?.id) {\r\n          return data.device.id;\r\n        }\r\n        return null;\r\n      });\r\n  }\r\n\r\n  play(uri, deviceID) {\r\n    const query = deviceID != null ? `?device_id=${deviceID}` : \"\";\r\n    return fetch(`https://api.spotify.com/v1/me/player/play/${query}`, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify({ uris: [uri] }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.accessToken}`,\r\n      },\r\n    })\r\n      .then(this.maybeHandle401)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          console.error(\"Error playing uri\", response);\r\n        }\r\n      });\r\n  }\r\n\r\n  transferPlayback(deviceID) {\r\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\r\n      method: \"PUT\",\r\n      body: JSON.stringify({ device_ids: [deviceID], play: true }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.accessToken}`,\r\n      },\r\n    })\r\n      .then(this.maybeHandle401)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"unable to transfer playback to device: \" + deviceID);\r\n        }\r\n      });\r\n  }\r\n\r\n  fetchDevices() {\r\n    return fetch(\"https://api.spotify.com/v1/me/player/devices\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${this.accessToken}`,\r\n      },\r\n    })\r\n      .then(this.maybeHandle401)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"unable to fetch devices\");\r\n        }\r\n        return response.json();\r\n      });\r\n  }\r\n}\r\n","/* eslint-disable */\r\n// this is an auto generated file. This will be overwritten\r\n\r\nexport const createUser = /* GraphQL */ `\r\n  mutation CreateUser(\r\n    $input: CreateUserInput!\r\n    $condition: ModelUserConditionInput\r\n  ) {\r\n    createUser(input: $input, condition: $condition) {\r\n      userID\r\n      latestEvent\r\n      songEvents {\r\n        items {\r\n          id\r\n          spotifyURI\r\n          timestamp\r\n          position\r\n          userID\r\n        }\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const updateUser = /* GraphQL */ `\r\n  mutation UpdateUser(\r\n    $input: UpdateUserInput!\r\n    $condition: ModelUserConditionInput\r\n  ) {\r\n    updateUser(input: $input, condition: $condition) {\r\n      userID\r\n      latestEvent\r\n      songEvents {\r\n        items {\r\n          id\r\n          spotifyURI\r\n          timestamp\r\n          position\r\n          userID\r\n        }\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const deleteUser = /* GraphQL */ `\r\n  mutation DeleteUser(\r\n    $input: DeleteUserInput!\r\n    $condition: ModelUserConditionInput\r\n  ) {\r\n    deleteUser(input: $input, condition: $condition) {\r\n      userID\r\n      latestEvent\r\n      songEvents {\r\n        items {\r\n          id\r\n          spotifyURI\r\n          timestamp\r\n          position\r\n          userID\r\n        }\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const createSongEvent = /* GraphQL */ `\r\n  mutation CreateSongEvent(\r\n    $input: CreateSongEventInput!\r\n    $condition: ModelSongEventConditionInput\r\n  ) {\r\n    createSongEvent(input: $input, condition: $condition) {\r\n      id\r\n      spotifyURI\r\n      timestamp\r\n      position\r\n      track {\r\n        uri\r\n        trackID\r\n        name\r\n        durationMs\r\n        albumName\r\n        artistName\r\n        albumImg\r\n      }\r\n      userID\r\n      user {\r\n        userID\r\n        latestEvent\r\n        songEvents {\r\n          nextToken\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const updateSongEvent = /* GraphQL */ `\r\n  mutation UpdateSongEvent(\r\n    $input: UpdateSongEventInput!\r\n    $condition: ModelSongEventConditionInput\r\n  ) {\r\n    updateSongEvent(input: $input, condition: $condition) {\r\n      id\r\n      spotifyURI\r\n      timestamp\r\n      position\r\n      track {\r\n        uri\r\n        trackID\r\n        name\r\n        durationMs\r\n        albumName\r\n        artistName\r\n        albumImg\r\n      }\r\n      userID\r\n      user {\r\n        userID\r\n        latestEvent\r\n        songEvents {\r\n          nextToken\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const deleteSongEvent = /* GraphQL */ `\r\n  mutation DeleteSongEvent(\r\n    $input: DeleteSongEventInput!\r\n    $condition: ModelSongEventConditionInput\r\n  ) {\r\n    deleteSongEvent(input: $input, condition: $condition) {\r\n      id\r\n      spotifyURI\r\n      timestamp\r\n      position\r\n      track {\r\n        uri\r\n        trackID\r\n        name\r\n        durationMs\r\n        albumName\r\n        artistName\r\n        albumImg\r\n      }\r\n      userID\r\n      user {\r\n        userID\r\n        latestEvent\r\n        songEvents {\r\n          nextToken\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const createTrack = /* GraphQL */ `\r\n  mutation CreateTrack(\r\n    $input: CreateTrackInput!\r\n    $condition: ModelTrackConditionInput\r\n  ) {\r\n    createTrack(input: $input, condition: $condition) {\r\n      uri\r\n      trackID\r\n      name\r\n      durationMs\r\n      albumName\r\n      artistName\r\n      albumImg\r\n    }\r\n  }\r\n`;\r\nexport const updateTrack = /* GraphQL */ `\r\n  mutation UpdateTrack(\r\n    $input: UpdateTrackInput!\r\n    $condition: ModelTrackConditionInput\r\n  ) {\r\n    updateTrack(input: $input, condition: $condition) {\r\n      uri\r\n      trackID\r\n      name\r\n      durationMs\r\n      albumName\r\n      artistName\r\n      albumImg\r\n    }\r\n  }\r\n`;\r\nexport const deleteTrack = /* GraphQL */ `\r\n  mutation DeleteTrack(\r\n    $input: DeleteTrackInput!\r\n    $condition: ModelTrackConditionInput\r\n  ) {\r\n    deleteTrack(input: $input, condition: $condition) {\r\n      uri\r\n      trackID\r\n      name\r\n      durationMs\r\n      albumName\r\n      artistName\r\n      albumImg\r\n    }\r\n  }\r\n`;\r\n","import React, { createContext } from \"react\";\r\nimport { useLocalStorage } from \"@rehooks/local-storage\";\r\nimport SpotifyAPI from \"./SpotifyAPI.js\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport * as mutations from \"./graphql/mutations\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function AuthRedirect() {\r\n  return null;\r\n}\r\n\r\nexport function getAuthorizeURI(pathname) {\r\n  const clientID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\r\n  const scopes = process.env.REACT_APP_SPOTIFY_SCOPES;\r\n  const redirectURI = encodeURIComponent(\r\n    process.env.REACT_APP_SPOTIFY_REDIRECT_URI\r\n  );\r\n  const currentPath = encodeURIComponent(pathname);\r\n  return `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientID}&scope=${scopes}&redirect_uri=${redirectURI}&state=${currentPath}`;\r\n}\r\n\r\nfunction handleAuthRedirect(setAuthInfo, history, location) {\r\n  if (location.hash) {\r\n    const params = {};\r\n    location.hash\r\n      .slice(1)\r\n      .split(\"&\")\r\n      .map((param) => param.split(\"=\"))\r\n      .forEach((tup) => {\r\n        params[tup[0]] = tup[1];\r\n      });\r\n    const accessToken = params.access_token;\r\n    if (accessToken == null) {\r\n      return;\r\n    }\r\n    location.hash = \"\";\r\n    new SpotifyAPI(accessToken).fetchUserInfo().then((user) => {\r\n      const spotifyIdentifier = user.display_name.split(\" \")[0];\r\n      setAuthInfo({ accessToken, username: spotifyIdentifier });\r\n      history.push(decodeURIComponent(params.state));\r\n      // Ensure the user is created upon login\r\n      API.graphql(\r\n        graphqlOperation(mutations.createUser, {\r\n          input: {\r\n            userID: spotifyIdentifier,\r\n          },\r\n        })\r\n      ).catch(() => console.error(\"user creation failed\"));\r\n    });\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [authInfo, setAuthInfo] = useLocalStorage(\"EMAuthInfo\");\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const username = authInfo?.username;\r\n  const accessToken = authInfo?.accessToken;\r\n\r\n  React.useEffect(() => {\r\n    handleAuthRedirect(setAuthInfo, history, location);\r\n  }, [setAuthInfo, history, location]);\r\n\r\n  const authContext = React.useMemo(() => {\r\n    return accessToken != null && username != null\r\n      ? {\r\n          accessToken: accessToken,\r\n          username: username,\r\n          logout: () => setAuthInfo(null),\r\n          retryAuth: () => {\r\n            setAuthInfo(null);\r\n            window.location.href = getAuthorizeURI(window.location.pathname);\r\n          },\r\n        }\r\n      : null;\r\n  }, [username, accessToken, setAuthInfo]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContext}>{children}</AuthContext.Provider>\r\n  );\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.png\";\nimport { Link, useLocation, useRouteMatch } from \"react-router-dom\";\nimport { AuthContext, getAuthorizeURI } from \"./Auth.js\";\n\nfunction Header() {\n  const authInfo = React.useContext(AuthContext);\n  const location = useLocation();\n  const authorizeURI = getAuthorizeURI(location.pathname);\n  const match = useRouteMatch(\"/u/\" + authInfo?.username);\n\n  function handleLogout(e) {\n    e.preventDefault();\n    authInfo.logout();\n  }\n\n  return (\n    <header className=\"App-header\">\n      <Link className=\"App-title\" to=\"/\">\n        <h1>EARDRUM MONSTER</h1>\n      </Link>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      {authInfo != null ? (\n        <>\n          {match == null ? (\n            <Link className=\"App-link\" to={`/u/${authInfo.username}`}>\n              Broadcast\n            </Link>\n          ) : (\n            /* eslint-disable-next-line jsx-a11y/anchor-is-valid */\n            <a className=\"App-link\" href=\"#\" onClick={handleLogout}>\n              Logout\n            </a>\n          )}\n        </>\n      ) : (\n        <a className=\"App-link\" href={authorizeURI}>\n          Login\n        </a>\n      )}\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport * as mutations from \"./graphql/mutations\";\r\n\r\nexport default function DevPublisher({ hostUsername }) {\r\n  React.useEffect(() => {\r\n    const timeoutID = setInterval(() => {\r\n      const tracks = [\r\n        \"spotify:track:08KMh61hPslT7sEf2tEgtT\",\r\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\r\n        \"spotify:track:59nNxS2V7M4UDH058BU5qJ\",\r\n        \"spotify:track:1CkrhTdtRhUzPmA8qtr6y6\",\r\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\r\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\r\n        \"spotify:track:000PzErbB04ALQCv9iYiQm\",\r\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\r\n        \"spotify:track:7JGepQzDnQDYeGxLCTBSsG\",\r\n        \"spotify:track:4PPrsYpzuRqe4QoCDGAG4b\",\r\n      ];\r\n      const songEvent = {\r\n        userID: hostUsername,\r\n        timestamp: Math.floor(Date.now() / 1000),\r\n        position: 0,\r\n        spotifyURI: tracks[(Math.random() * 100).toString()[0]],\r\n      };\r\n      API.graphql(\r\n        graphqlOperation(mutations.createSongEvent, { input: songEvent })\r\n      ).then((data) => console.log(\"Publishing: \", data));\r\n    }, 5000);\r\n\r\n    return () => {\r\n      clearInterval(timeoutID);\r\n    };\r\n  }, [hostUsername]);\r\n\r\n  return <h1>DevPublisher enabled</h1>;\r\n}\r\n","export default class SpotifyWebPlayer {\r\n  constructor(player, spotifyAPI) {\r\n    this.player = player;\r\n    this.spotifyAPI = spotifyAPI;\r\n  }\r\n\r\n  fetchState() {\r\n    return this.player.getCurrentState();\r\n  }\r\n\r\n  pause() {\r\n    return this.player.pause();\r\n  }\r\n\r\n  seek(ms) {\r\n    return this.player.seek(ms);\r\n  }\r\n\r\n  nextTrack() {\r\n    return this.player.nextTrack();\r\n  }\r\n\r\n  addStateChangeListener(callback) {\r\n    this.player.addListener(\"player_state_changed\", callback);\r\n  }\r\n\r\n  removeStateChangeListener(callback) {\r\n    this.player.removeListener(\"player_state_changed\", callback);\r\n  }\r\n\r\n  getDeviceID() {\r\n    return this.player.deviceID;\r\n  }\r\n\r\n  transferPlayback() {\r\n    return this.spotifyAPI.transferPlayback(this.player.deviceID);\r\n  }\r\n\r\n  static inject() {\r\n    return new Promise((resolve) => {\r\n      if (window?.Spotify?.Player) {\r\n        resolve();\r\n        return;\r\n      }\r\n      window.onSpotifyWebPlaybackSDKReady = () => {\r\n        resolve();\r\n      };\r\n      const sdkScript = document.createElement(\"script\");\r\n      sdkScript.src = process.env.REACT_APP_SPOTIFY_WEB_PLAYER_SDK;\r\n      document.body.appendChild(sdkScript);\r\n    });\r\n  }\r\n\r\n  static initializePlayer(accessToken, onUnauthorized) {\r\n    // Update accessToken singleton so existing players can access it;\r\n    SpotifyWebPlayer.__accessToken = accessToken;\r\n    SpotifyWebPlayer.__onUnauthorized = onUnauthorized;\r\n\r\n    return new Promise((resolve) => {\r\n      if (window.EMglobalPlayerInstance) {\r\n        resolve(window.EMGlobalPlayerInstance);\r\n        return;\r\n      }\r\n\r\n      const player = new window.Spotify.Player({\r\n        name: \"eardrum.monster\",\r\n        getOAuthToken: (cb) => cb(SpotifyWebPlayer.__accessToken),\r\n        volume: 0.1,\r\n      });\r\n\r\n      player.on(\"initialization_error\", ({ message }) => {\r\n        console.error(\"Failed to initialize\", message);\r\n      });\r\n      player.on(\"authentication_error\", ({ message }) => {\r\n        console.error(\"Failed to authenticate\", message);\r\n        SpotifyWebPlayer.__onUnauthorized();\r\n      });\r\n      player.on(\"account_error\", ({ message }) => {\r\n        console.error(\"Failed to validate Spotify account\", message);\r\n      });\r\n      player.on(\"playback_error\", ({ message }) => {\r\n        console.error(\"Failed to perform playback\", message);\r\n      });\r\n      player.on(\"ready\", ({ device_id: id }) => {\r\n        player.deviceID = id;\r\n        window.EMGlobalPlayerInstance = player;\r\n        resolve(player);\r\n      });\r\n\r\n      player.connect().then((success) => {\r\n        if (!success) {\r\n          console.error(\"Failed to connect to the web player\");\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  static createInstance(accessToken, spotifyAPI, onUnauthorized) {\r\n    return SpotifyWebPlayer.inject()\r\n      .then(() =>\r\n        SpotifyWebPlayer.initializePlayer(accessToken, onUnauthorized)\r\n      )\r\n      .then((player) => new SpotifyWebPlayer(player, spotifyAPI));\r\n  }\r\n\r\n  static getTrackFromState(state) {\r\n    return state?.track_window?.current_track;\r\n  }\r\n\r\n  static isAd(state) {\r\n    return state?.track_window?.current_track?.type === \"ad\";\r\n  }\r\n}\r\n","import React, { createContext } from \"react\";\r\nimport SpotifyAPI from \"./SpotifyAPI.js\";\r\nimport SpotifyWebPlayer from \"./SpotifyWebPlayer.js\";\r\nimport { AuthContext } from \"./Auth.js\";\r\n\r\nexport const SpotifyContext = createContext();\r\n\r\nexport function SpotifyProvider({ children }) {\r\n  const authInfo = React.useContext(AuthContext);\r\n  const [webPlayer, setWebPlayer] = React.useState(null);\r\n  const [spotifyAPI, setSpotifyAPI] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    if (authInfo == null) {\r\n      setWebPlayer(null);\r\n      setSpotifyAPI(null);\r\n    } else {\r\n      const api = new SpotifyAPI(authInfo.accessToken, authInfo.logout);\r\n      setSpotifyAPI(api);\r\n      SpotifyWebPlayer.createInstance(\r\n        authInfo.accessToken,\r\n        api,\r\n        authInfo.retryAuth\r\n      ).then((inst) => {\r\n        setWebPlayer(inst);\r\n      });\r\n    }\r\n  }, [authInfo]);\r\n\r\n  const spotifyContext = React.useMemo(\r\n    () => ({\r\n      webPlayer,\r\n      spotifyAPI,\r\n    }),\r\n    [webPlayer, spotifyAPI]\r\n  );\r\n\r\n  return (\r\n    <SpotifyContext.Provider value={spotifyContext}>\r\n      {children}\r\n    </SpotifyContext.Provider>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { SpotifyContext } from \"./SpotifyContext.js\";\r\n\r\nexport default function useSpotifyWebPlayer() {\r\n  const spotifyContext = React.useContext(SpotifyContext);\r\n  return spotifyContext?.webPlayer;\r\n}\r\n","import React from \"react\";\r\nimport useSpotifyAPI from \"./useSpotifyAPI.js\";\r\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\r\n\r\nexport default function SongPlayerWithControls({ song }) {\r\n  const spotifyAPI = useSpotifyAPI();\r\n  const spotifyWebPlayer = useSpotifyWebPlayer();\r\n  const [devices, setDevices] = React.useState(null);\r\n  const [activeDeviceID, setActiveDeviceID] = React.useState(null);\r\n  const activeDeviceIDRef = React.useRef(null);\r\n  const [isReady, setIsReady] = React.useState(false);\r\n  activeDeviceIDRef.current = activeDeviceID;\r\n\r\n  const eardrumPlayer = spotifyWebPlayer && {\r\n    id: spotifyWebPlayer.getDeviceID(),\r\n    name: \"eardrum.monster\",\r\n  };\r\n  const deviceList = devices ?? [];\r\n  if (\r\n    eardrumPlayer != null &&\r\n    !deviceList.find((d) => d.id === eardrumPlayer.id)\r\n  ) {\r\n    deviceList.push(eardrumPlayer);\r\n  }\r\n\r\n  // Fetch devices\r\n  React.useEffect(() => {\r\n    spotifyAPI &&\r\n      spotifyAPI.fetchDevices().then((data) => {\r\n        setDevices(data.devices);\r\n      });\r\n  }, [spotifyAPI]);\r\n\r\n  // Use web player if there is no active device\r\n  React.useEffect(() => {\r\n    if (spotifyAPI && devices) {\r\n      const activeDevice = devices.find((device) => device.is_active === true);\r\n      if (activeDevice) {\r\n        setActiveDeviceID(activeDevice.id);\r\n        setIsReady(true);\r\n      } else if (spotifyWebPlayer) {\r\n        setActiveDeviceID(spotifyWebPlayer.getDeviceID());\r\n        setIsReady(true);\r\n      }\r\n    }\r\n  }, [spotifyAPI, devices, spotifyWebPlayer]);\r\n\r\n  React.useEffect(() => {\r\n    activeDeviceIDRef.current &&\r\n      isReady &&\r\n      spotifyAPI &&\r\n      spotifyAPI.play(song.spotifyURI, activeDeviceIDRef.current);\r\n  }, [spotifyAPI, song, isReady]);\r\n\r\n  const handleChange = (event) => {\r\n    const deviceID = event.target.value;\r\n    spotifyAPI.transferPlayback(deviceID);\r\n    setActiveDeviceID(deviceID);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Listen-controls\">\r\n      <div>Playing on device:</div>\r\n      <select value={activeDeviceID ?? \"\"} onChange={handleChange}>\r\n        {deviceList?.map((device) => (\r\n          <option key={device.id} value={device.id}>\r\n            {device.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { SpotifyContext } from \"./SpotifyContext.js\";\r\n\r\nexport default function useSpotifyAPI() {\r\n  const spotifyContext = React.useContext(SpotifyContext);\r\n  return spotifyContext?.spotifyAPI;\r\n}\r\n","import React from \"react\";\r\nimport \"./Track.css\";\r\nimport logo from \"./logo.png\";\r\n\r\nfunction Track({ track }) {\r\n  return (\r\n    <div className=\"Track\">\r\n      <img\r\n        className=\"Track-albumImg\"\r\n        src={track?.albumImg ?? logo}\r\n        alt=\"Album art\"\r\n      />\r\n      <div className=\"Track-details\">\r\n        <p className=\"Track-name\">{track?.name ?? \"Unknown\"}</p>\r\n        <p className=\"Track-artist\">{track?.artistName}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Track;\r\n","import React from \"react\";\r\nimport Track from \"./Track.js\";\r\n\r\nexport default function TrackList({ songs }) {\r\n  return (\r\n    <>\r\n      <h3>Recently played tracks</h3>\r\n      {songs.map((song) => (\r\n        <div key={song.id} className=\"Listen-track\">\r\n          <Track track={song.track} />\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./EQBars.css\";\r\n\r\nexport default function EQBars({ className }) {\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"EQBars-container\">\r\n        <ol className=\"EQBars-column\">\r\n          <li className=\"colour-bar\"></li>\r\n        </ol>\r\n        <ol className=\"EQBars-column\">\r\n          <li className=\"colour-bar\"></li>\r\n        </ol>\r\n        <ol className=\"EQBars-column\">\r\n          <li className=\"colour-bar\"></li>\r\n        </ol>\r\n        <ol className=\"EQBars-column\">\r\n          <li className=\"colour-bar\"></li>\r\n        </ol>\r\n        <ol className=\"EQBars-column\">\r\n          <li className=\"colour-bar\"></li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable */\r\n// this is an auto generated file. This will be overwritten\r\n\r\nexport const getUser = /* GraphQL */ `\r\n  query GetUser($userID: String!) {\r\n    getUser(userID: $userID) {\r\n      userID\r\n      latestEvent\r\n      songEvents {\r\n        items {\r\n          id\r\n          spotifyURI\r\n          timestamp\r\n          position\r\n          userID\r\n        }\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const listUsers = /* GraphQL */ `\r\n  query ListUsers(\r\n    $userID: String\r\n    $filter: ModelUserFilterInput\r\n    $limit: Int\r\n    $nextToken: String\r\n    $sortDirection: ModelSortDirection\r\n  ) {\r\n    listUsers(\r\n      userID: $userID\r\n      filter: $filter\r\n      limit: $limit\r\n      nextToken: $nextToken\r\n      sortDirection: $sortDirection\r\n    ) {\r\n      items {\r\n        userID\r\n        latestEvent\r\n        songEvents {\r\n          nextToken\r\n        }\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n`;\r\nexport const getSongEvent = /* GraphQL */ `\r\n  query GetSongEvent($id: ID!) {\r\n    getSongEvent(id: $id) {\r\n      id\r\n      spotifyURI\r\n      timestamp\r\n      position\r\n      track {\r\n        uri\r\n        trackID\r\n        name\r\n        durationMs\r\n        albumName\r\n        artistName\r\n        albumImg\r\n      }\r\n      userID\r\n      user {\r\n        userID\r\n        latestEvent\r\n        songEvents {\r\n          nextToken\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const listSongEvents = /* GraphQL */ `\r\n  query ListSongEvents(\r\n    $filter: ModelSongEventFilterInput\r\n    $limit: Int\r\n    $nextToken: String\r\n  ) {\r\n    listSongEvents(filter: $filter, limit: $limit, nextToken: $nextToken) {\r\n      items {\r\n        id\r\n        spotifyURI\r\n        timestamp\r\n        position\r\n        track {\r\n          uri\r\n          trackID\r\n          name\r\n          durationMs\r\n          albumName\r\n          artistName\r\n          albumImg\r\n        }\r\n        userID\r\n        user {\r\n          userID\r\n          latestEvent\r\n        }\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n`;\r\nexport const getTrack = /* GraphQL */ `\r\n  query GetTrack($uri: String!) {\r\n    getTrack(uri: $uri) {\r\n      uri\r\n      trackID\r\n      name\r\n      durationMs\r\n      albumName\r\n      artistName\r\n      albumImg\r\n    }\r\n  }\r\n`;\r\nexport const listTracks = /* GraphQL */ `\r\n  query ListTracks(\r\n    $uri: String\r\n    $filter: ModelTrackFilterInput\r\n    $limit: Int\r\n    $nextToken: String\r\n    $sortDirection: ModelSortDirection\r\n  ) {\r\n    listTracks(\r\n      uri: $uri\r\n      filter: $filter\r\n      limit: $limit\r\n      nextToken: $nextToken\r\n      sortDirection: $sortDirection\r\n    ) {\r\n      items {\r\n        uri\r\n        trackID\r\n        name\r\n        durationMs\r\n        albumName\r\n        artistName\r\n        albumImg\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n`;\r\nexport const songEventsByUserId = /* GraphQL */ `\r\n  query SongEventsByUserId(\r\n    $userID: String\r\n    $timestamp: ModelIntKeyConditionInput\r\n    $sortDirection: ModelSortDirection\r\n    $filter: ModelSongEventFilterInput\r\n    $limit: Int\r\n    $nextToken: String\r\n  ) {\r\n    songEventsByUserID(\r\n      userID: $userID\r\n      timestamp: $timestamp\r\n      sortDirection: $sortDirection\r\n      filter: $filter\r\n      limit: $limit\r\n      nextToken: $nextToken\r\n    ) {\r\n      items {\r\n        id\r\n        spotifyURI\r\n        timestamp\r\n        position\r\n        track {\r\n          uri\r\n          trackID\r\n          name\r\n          durationMs\r\n          albumName\r\n          artistName\r\n          albumImg\r\n        }\r\n        userID\r\n        user {\r\n          userID\r\n          latestEvent\r\n        }\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { graphqlOperation } from \"aws-amplify\";\r\nimport { Connect } from \"aws-amplify-react\";\r\nimport \"./Listen.css\";\r\nimport DevPublisher from \"./DevPublisher.js\";\r\nimport { AuthContext, getAuthorizeURI } from \"./Auth.js\";\r\nimport SongPlayerWithControls from \"./SongPlayerWithControls.js\";\r\nimport TrackList from \"./TrackList.js\";\r\nimport Track from \"./Track.js\";\r\nimport EQBars from \"./EQBars.js\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport NoSleep from \"nosleep.js\";\r\nimport { useLocalStorage } from \"@rehooks/local-storage\";\r\n\r\nimport * as queries from \"./graphql/queries\";\r\nimport * as subscriptions from \"./graphql/subscriptions\";\r\n\r\nfunction StartListening({ children, isListening, onClick }) {\r\n  const location = useLocation();\r\n  const authInfo = React.useContext(AuthContext);\r\n\r\n  if (isListening) {\r\n    return children;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Listen-startListening\">\r\n      <div className=\"Listen-startListeningMask\">{children}</div>\r\n      <div className=\"Listen-startListeningContent\">\r\n        <EQBars className=\"Listen-EQ\" />\r\n      </div>\r\n      <div className=\"Listen-startListeningContent\">\r\n        <a className=\"Listen-play\" href={location.pathname} onClick={onClick}>\r\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\r\n          👂\r\n          <span className=\"Listen-playLink\">\r\n            {authInfo == null ? \"Login to join ▶\" : \"Join ▶\"}\r\n          </span>\r\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\r\n          😈\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ListenPlayer({ isCurrentlyLive, songs, hostUsername }) {\r\n  const authInfo = React.useContext(AuthContext);\r\n  const location = useLocation();\r\n  const [isListeningUsername, setIsListeningUsername] = useLocalStorage(\r\n    \"EMisListeningUsername\"\r\n  );\r\n  const isListening = authInfo && hostUsername === isListeningUsername;\r\n\r\n  React.useEffect(() => {\r\n    if (isListening) {\r\n      const noSleep = new NoSleep();\r\n      noSleep.enable();\r\n      return () => noSleep.disable();\r\n    }\r\n  }, [isListening]);\r\n\r\n  const handleJoin = React.useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      setIsListeningUsername(hostUsername);\r\n      if (authInfo == null) {\r\n        window.location.href = getAuthorizeURI(location.pathname);\r\n      }\r\n    },\r\n    [setIsListeningUsername, authInfo, location, hostUsername]\r\n  );\r\n\r\n  if (!isCurrentlyLive) {\r\n    return <h1>{hostUsername} is offline</h1>;\r\n  }\r\n\r\n  return (\r\n    <StartListening isListening={isListening} onClick={handleJoin}>\r\n      {isListening && <p>Listening to {hostUsername}'s channel!</p>}\r\n      {isListening && <SongPlayerWithControls song={songs[0]} />}\r\n      <div>Now Playing:</div>\r\n      <Track track={songs[0].track} />\r\n    </StartListening>\r\n  );\r\n}\r\n\r\nfunction Listen({ hostUsername }) {\r\n  const location = useLocation();\r\n  const devPublisherEnabled = location.search.includes(\"DEV=1\");\r\n\r\n  return (\r\n    <div className=\"Listen\">\r\n      <div className=\"Listen-header\">\r\n        {devPublisherEnabled && <DevPublisher hostUsername={hostUsername} />}\r\n      </div>\r\n\r\n      <div className=\"Listen-trackList\">\r\n        <Connect\r\n          query={graphqlOperation(queries.songEventsByUserId, {\r\n            userID: hostUsername,\r\n            sortDirection: \"DESC\",\r\n            limit: 50,\r\n          })}\r\n          subscription={graphqlOperation(subscriptions.onCreateSongEvent, {\r\n            userID: hostUsername,\r\n          })}\r\n          onSubscriptionMsg={(prev, { onCreateSongEvent }) => {\r\n            if (prev?.songEventsByUserID?.items == null) {\r\n              console.error(\"bad state in listen\", prev);\r\n              return prev;\r\n            }\r\n            prev.songEventsByUserID.items.unshift(onCreateSongEvent);\r\n            if (prev.songEventsByUserID.items.length > 50) {\r\n              prev.songEventsByUserID.items.pop();\r\n            }\r\n            return prev;\r\n          }}\r\n        >\r\n          {({ data, loading, error }) => {\r\n            if (error) return <h3>Error</h3>;\r\n            if (loading || !data) return <h3>Loading...</h3>;\r\n            const songs =\r\n              (data.songEventsByUserID && data.songEventsByUserID.items) ?? [];\r\n            if (songs.length === 0) {\r\n              return <div>No track history for {hostUsername}</div>;\r\n            }\r\n            const isRecent =\r\n              Math.floor(Date.now() / 1000) - songs[0].timestamp < 600; // 10 minutes in seconds\r\n            return (\r\n              <>\r\n                <ListenPlayer\r\n                  isCurrentlyLive={isRecent}\r\n                  songs={songs}\r\n                  hostUsername={hostUsername}\r\n                />\r\n                <TrackList songs={isRecent ? songs.slice(1) : songs} />\r\n              </>\r\n            );\r\n          }}\r\n        </Connect>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Listen;\r\n","/* eslint-disable */\r\n// this is an auto generated file. This will be overwritten\r\n\r\nexport const onCreateSongEvent = /* GraphQL */ `\r\n  subscription OnCreateSongEvent($userID: String!) {\r\n    onCreateSongEvent(userID: $userID) {\r\n      id\r\n      spotifyURI\r\n      timestamp\r\n      position\r\n      track {\r\n        uri\r\n        trackID\r\n        name\r\n        durationMs\r\n        albumName\r\n        artistName\r\n        albumImg\r\n      }\r\n      userID\r\n      user {\r\n        userID\r\n        latestEvent\r\n        songEvents {\r\n          nextToken\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const onCreateUser = /* GraphQL */ `\r\n  subscription OnCreateUser {\r\n    onCreateUser {\r\n      userID\r\n      latestEvent\r\n      songEvents {\r\n        items {\r\n          id\r\n          spotifyURI\r\n          timestamp\r\n          position\r\n          userID\r\n        }\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const onUpdateUser = /* GraphQL */ `\r\n  subscription OnUpdateUser {\r\n    onUpdateUser {\r\n      userID\r\n      latestEvent\r\n      songEvents {\r\n        items {\r\n          id\r\n          spotifyURI\r\n          timestamp\r\n          position\r\n          userID\r\n        }\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const onDeleteUser = /* GraphQL */ `\r\n  subscription OnDeleteUser {\r\n    onDeleteUser {\r\n      userID\r\n      latestEvent\r\n      songEvents {\r\n        items {\r\n          id\r\n          spotifyURI\r\n          timestamp\r\n          position\r\n          userID\r\n        }\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const onCreateTrack = /* GraphQL */ `\r\n  subscription OnCreateTrack {\r\n    onCreateTrack {\r\n      uri\r\n      trackID\r\n      name\r\n      durationMs\r\n      albumName\r\n      artistName\r\n      albumImg\r\n    }\r\n  }\r\n`;\r\nexport const onUpdateTrack = /* GraphQL */ `\r\n  subscription OnUpdateTrack {\r\n    onUpdateTrack {\r\n      uri\r\n      trackID\r\n      name\r\n      durationMs\r\n      albumName\r\n      artistName\r\n      albumImg\r\n    }\r\n  }\r\n`;\r\nexport const onDeleteTrack = /* GraphQL */ `\r\n  subscription OnDeleteTrack {\r\n    onDeleteTrack {\r\n      uri\r\n      trackID\r\n      name\r\n      durationMs\r\n      albumName\r\n      artistName\r\n      albumImg\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport * as mutations from \"./graphql/mutations\";\r\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\r\nimport SpotifyWebPlayer from \"./SpotifyWebPlayer.js\";\r\nimport { AuthContext } from \"./Auth.js\";\r\n\r\nfunction publishSongEvent(songEvent) {\r\n  return API.graphql(\r\n    graphqlOperation(mutations.createSongEvent, {\r\n      input: songEvent,\r\n    })\r\n  );\r\n}\r\n\r\nfunction publishTrack(track) {\r\n  return API.graphql(graphqlOperation(mutations.createTrack, { input: track }));\r\n}\r\n\r\nexport default function BroadcastPublisher({ currentTrack, onSongEvent }) {\r\n  const authInfo = React.useContext(AuthContext);\r\n  const spotifyWebPlayer = useSpotifyWebPlayer();\r\n  const handlePlayerStateChangedRef = React.useRef(null);\r\n  const currentTrackRef = React.useRef(null);\r\n\r\n  // Cache currentTrack locally to prevent high frequency duplicate updates\r\n  if (currentTrackRef.current == null && currentTrack != null) {\r\n    currentTrackRef.current = currentTrack;\r\n  }\r\n\r\n  const handlePlayerStateChanged = (newState) => {\r\n    const newTrack = SpotifyWebPlayer.getTrackFromState(newState);\r\n    // Avoid updating if track is the same\r\n    if (newTrack == null || newTrack.uri === currentTrackRef?.current?.uri) {\r\n      return;\r\n    }\r\n    const songEvent = {\r\n      userID: authInfo.username,\r\n      timestamp: Math.floor(Date.now() / 1000),\r\n      position: Math.floor(newState.position ?? 0),\r\n      spotifyURI: newTrack.uri,\r\n    };\r\n    const trackData = {\r\n      uri: newTrack.uri,\r\n      trackID: newTrack.id,\r\n      name: newTrack.name,\r\n      durationMs: newTrack.duration_ms,\r\n      albumName: newTrack.album.name,\r\n      artistName: newTrack.artists[0].name,\r\n      albumImg: newTrack.album.images[0].url,\r\n    };\r\n    currentTrackRef.current = trackData;\r\n    onSongEvent(trackData, songEvent);\r\n    publishTrack(trackData).then(() => publishSongEvent(songEvent));\r\n  };\r\n  handlePlayerStateChangedRef.current = handlePlayerStateChanged;\r\n\r\n  React.useEffect(() => {\r\n    if (spotifyWebPlayer) {\r\n      const changeListener = (newState) =>\r\n        handlePlayerStateChangedRef.current(newState);\r\n      const initFunc = {\r\n        current: (id) => {\r\n          if (id === spotifyWebPlayer.getDeviceID()) {\r\n            // Request current state\r\n            spotifyWebPlayer.fetchState().then((newState) => {\r\n              handlePlayerStateChangedRef.current(newState);\r\n            });\r\n          } else {\r\n            // Transfer playback to the web player\r\n            spotifyWebPlayer.transferPlayback();\r\n          }\r\n        },\r\n      };\r\n      // Subscribe to future changes\r\n      spotifyWebPlayer.addStateChangeListener(changeListener);\r\n\r\n      // get current state or transfer playback\r\n      spotifyWebPlayer.spotifyAPI.fetchCurrentDeviceID().then((id) => {\r\n        initFunc.current(id);\r\n      });\r\n\r\n      // Remove the listener on unMount\r\n      return () => {\r\n        spotifyWebPlayer.removeStateChangeListener(changeListener);\r\n        initFunc.current = () => {};\r\n      };\r\n    }\r\n  }, [spotifyWebPlayer, handlePlayerStateChangedRef]);\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport Switch from \"react-switch\";\r\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\r\nimport { useLocalStorage } from \"@rehooks/local-storage\";\r\n\r\nexport default function PowerHourControl() {\r\n  const [phEnabled, setPhEnabled] = useLocalStorage(\"EMPhEnabled\", false);\r\n  const [phCount, setPhCount] = useLocalStorage(\"EMPhCount\", 1);\r\n  const spotifyWebPlayer = useSpotifyWebPlayer();\r\n  const phCallbackRef = React.useRef();\r\n\r\n  const phCallback = (timeoutID) => {\r\n    if (phEnabled) {\r\n      spotifyWebPlayer.nextTrack();\r\n      setPhCount(phCount + 1);\r\n    } else {\r\n      clearInterval(timeoutID);\r\n    }\r\n  };\r\n  phCallbackRef.current = phCallback;\r\n\r\n  const handleChange = React.useCallback(\r\n    (enabled) => {\r\n      setPhEnabled(enabled);\r\n      if (enabled) {\r\n        setPhCount(1);\r\n        spotifyWebPlayer && spotifyWebPlayer.nextTrack();\r\n      }\r\n    },\r\n    [setPhEnabled, setPhCount, spotifyWebPlayer]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (phEnabled && spotifyWebPlayer) {\r\n      const timeoutID = setInterval(() => {\r\n        phCallbackRef.current(timeoutID);\r\n      }, 60000);\r\n      return () => {\r\n        clearInterval(timeoutID);\r\n      };\r\n    }\r\n  }, [phEnabled, spotifyWebPlayer, phCallbackRef]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"Broadcast-controls\">\r\n        <label htmlFor=\"phToggle\">Power hour mode</label>\r\n        <Switch\r\n          className=\"Broadcast-switch\"\r\n          id=\"phToggle\"\r\n          onChange={handleChange}\r\n          checked={phEnabled}\r\n        />\r\n      </div>\r\n      {phEnabled && <h1>{phCount}</h1>}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\nimport * as queries from \"./graphql/queries\";\r\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\r\nimport Track from \"./Track.js\";\r\nimport TrackList from \"./TrackList.js\";\r\nimport \"./Broadcast.css\";\r\nimport { AuthContext } from \"./Auth.js\";\r\nimport BroadcastPublisher from \"./BroadcastPublisher.js\";\r\nimport PowerHourControl from \"./PowerHourControl.js\";\r\nimport EQBars from \"./EQBars.js\";\r\n\r\nfunction Broadcast() {\r\n  const authInfo = React.useContext(AuthContext);\r\n  const [songHistory, setSongHistory] = React.useState(null);\r\n  const [currentTrack, setCurrentTrack] = React.useState(null);\r\n  const spotifyWebPlayer = useSpotifyWebPlayer();\r\n\r\n  const handleSongEvent = React.useCallback(\r\n    (track, songEvent) => {\r\n      setSongHistory((h) =>\r\n        [{ ...songEvent, track, id: Math.random() }].concat(h)\r\n      );\r\n      setCurrentTrack(track);\r\n    },\r\n    [setSongHistory, setCurrentTrack]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (authInfo) {\r\n      API.graphql(\r\n        graphqlOperation(queries.songEventsByUserId, {\r\n          userID: authInfo.username,\r\n          sortDirection: \"DESC\",\r\n          limit: 10,\r\n        })\r\n      ).then((response) => {\r\n        setSongHistory(response.data?.songEventsByUserID?.items ?? []);\r\n      });\r\n    }\r\n  }, [authInfo]);\r\n\r\n  if (authInfo == null) {\r\n    return <div>Login to spotify to set the eardrum monster free</div>;\r\n  }\r\n\r\n  const trackList =\r\n    songHistory == null ? null : (\r\n      <div className=\"Broadcast-history\">\r\n        <TrackList songs={songHistory.slice(1)} />\r\n      </div>\r\n    );\r\n\r\n  const player =\r\n    spotifyWebPlayer == null || songHistory == null ? (\r\n      <div>Initializing Spotify web player...</div>\r\n    ) : (\r\n      <>\r\n        <PowerHourControl />\r\n        <h1>Connected.</h1>\r\n        <EQBars className=\"Broadcast-streaming\" />\r\n        <p>Now Playing:</p>\r\n        <div className=\"Broadcast-currentTrack\">\r\n          <BroadcastPublisher\r\n            currentTrack={currentTrack ?? songHistory[0]?.track}\r\n            onSongEvent={handleSongEvent}\r\n          />\r\n          <Track track={currentTrack ?? songHistory[0]?.track} />\r\n        </div>\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <div className=\"Broadcast\">\r\n      {player}\r\n      {trackList}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Broadcast;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Listen from \"./Listen.js\";\r\nimport Broadcast from \"./Broadcast.js\";\r\nimport { AuthContext } from \"./Auth.js\";\r\n\r\nfunction Channel() {\r\n  const authInfo = React.useContext(AuthContext);\r\n  const { id } = useParams();\r\n\r\n  if (authInfo?.username === id) {\r\n    return <Broadcast />;\r\n  }\r\n\r\n  return <Listen hostUsername={id} />;\r\n}\r\n\r\nexport default Channel;\r\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport \"./Home.css\";\nimport { AuthContext } from \"./Auth.js\";\nimport * as queries from \"./graphql/queries\";\nimport * as subscriptions from \"./graphql/subscriptions\";\n\nconst UserList = ({ users }) => (\n  <div className=\"Home-userList\">\n    {users.map((user) => (\n      <Link key={user.userID} className=\"Home-link\" to={`/u/${user.userID}`}>\n        {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n        👂 /u/{user.userID}\n      </Link>\n    ))}\n  </div>\n);\n\nfunction Home() {\n  const authInfo = React.useContext(AuthContext);\n  /* eslint-disable jsx-a11y/accessible-emoji */\n  return (\n    <div className=\"Home\">\n      <div className=\"Home-content\">\n        <div>\n          <em>\n            eardrum.monster allows you to sync your spotify client with friends\n          </em>\n        </div>\n        <h1>How do I use it?</h1>\n        {authInfo != null ? (\n          <>\n            <div>1. Click \"Broadcast\" at the top ☝️</div>\n            <div>2. Share the URL with your friends️</div>\n          </>\n        ) : (\n          <>\n            <div>1. Click \"Login\" at the top ☝️</div>\n            <div>2. Click \"Broadcast\" at the top ☝️</div>\n            <div>3. Share the URL with your friends️</div>\n          </>\n        )}\n\n        <h1>Its great for:</h1>\n        <div>\n          ✅ Streamers who want to let their viewers sync up their music with\n          high quality spotify audio\n        </div>\n        <div>✅ Online gamers who want listen together while gaming</div>\n        <div>\n          ✅ People who are quarantined and want to have virtual power hours\n          together\n        </div>\n\n        <h1>Did you say power hour?</h1>\n        <div>\n          ✅ Yes! eardrum.monster now features <em>Power hour mode™️</em> that\n          will automatically change the song every 60s. Everybody must drink\n          when the song changes.\n        </div>\n\n        <h1>Can I play century club?</h1>\n        <div>\n          ✅ We've got you covered! <em>Power hour mode™️</em> will keep em'\n          coming well beyond the traditional 60 minutes so you can attempt to\n          join the century club as many times as you want!\n        </div>\n      </div>\n      <div className=\"Home-list\">\n        {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n        <h2 className=\"Home-title\">😈 MONSTER LIST 😈</h2>\n        <Connect\n          query={graphqlOperation(queries.listUsers, {\n            limit: 50,\n          })}\n          subscription={graphqlOperation(subscriptions.onUpdateUser)}\n          onSubscriptionMsg={(prev, { onUserUpdate }) => {\n            // TODO update user list here\n            return prev;\n          }}\n        >\n          {({ data, loading, error }) => {\n            if (error) return <h3>Error</h3>;\n            if (loading || !data) return <h3>Loading...</h3>;\n            const users = (data.listUsers && data.listUsers.items) ?? [];\n            return <UserList users={users} />;\n          }}\n        </Connect>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./Header.js\";\r\nimport Channel from \"./Channel.js\";\r\nimport Home from \"./Home.js\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { AuthProvider, AuthRedirect } from \"./Auth.js\";\r\nimport { SpotifyProvider } from \"./SpotifyContext.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <AuthProvider>\r\n          <SpotifyProvider>\r\n            <Header />\r\n            <div className=\"App-content\">\r\n              <Switch>\r\n                <Route exact path=\"/\">\r\n                  <Home />\r\n                </Route>\r\n                <Route path=\"/auth/\">\r\n                  <AuthRedirect />\r\n                </Route>\r\n                <Route path=\"/u/:id\">\r\n                  <Channel />\r\n                </Route>\r\n              </Switch>\r\n            </div>\r\n          </SpotifyProvider>\r\n        </AuthProvider>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\r\n\r\nconst awsmobile = {\r\n    aws_project_region: \"us-east-1\",\r\n    aws_appsync_graphqlEndpoint:\r\n      \"https://kponrlcw6jap7j62gb56h2abf4.appsync-api.us-east-1.amazonaws.com/graphql\",\r\n    aws_appsync_region: \"us-east-1\",\r\n    aws_appsync_authenticationType: \"API_KEY\",\r\n    aws_appsync_apiKey: \"da2-jxgfvq7zzvacfozrt7vucdiipq\",\r\n   };\r\n   \r\n   export default awsmobile;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport awsconfig from \"./aws-exports\";\r\nimport Amplify from \"aws-amplify\";\r\n\r\nAmplify.configure(awsconfig);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.86828523.png\";"],"sourceRoot":""}